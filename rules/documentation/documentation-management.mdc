---
alwaysApply: true
description: "通用文档管理策略，防止创建过多临时文档和重复内容"
---

# 文档管理策略规则

## 🎯 核心原则

### 1. 最小化原则

- ❌ 不要为了记录思考过程而创建文档
- ❌ 不要创建名为 SUMMARY、COMPLETE、FINAL 等临时总结文档
- ✅ 只创建长期有用的、面向用户的文档

### 2. DRY 原则（Don't Repeat Yourself）

- ❌ 不要在多个文档中重复相同内容
- ✅ 使用文档间的引用链接
- ✅ 一个主题只创建一个权威文档

### 3. 用户导向原则

- ❌ 不要写面向过程的思考记录
- ✅ 只写解决实际问题的使用文档
- ✅ 按用户角色组织（开发者、运维、CI/CD）

## 📋 文档创建决策树

在创建任何 `.md` 文档前，必须通过以下检查：

```
问：这个内容是否需要持续维护和更新？
├─ 否 → ❌ 不要创建文档，使用代码注释或 Git commit
└─ 是 → 继续

问：这个内容是否已在其他文档中存在？
├─ 是 → ❌ 不要创建，更新现有文档或添加引用
└─ 否 → 继续

问：是否有 3 个以上的用户会使用这个文档？
├─ 否 → ❌ 考虑使用 Wiki、Issue 或内部笔记
└─ 是 → ✅ 创建文档
```

## 🚫 禁止的文档模式

### 完全禁止创建

❌ `*SUMMARY*.md` - 任何总结文档
❌ `*COMPLETE*.md` - 完成记录文档
❌ `*FINAL*.md` - 最终版本文档
❌ `*REVIEW*.md` - Review 记录（应整合到技术文档或创建 Issue）
❌ `*NOTES*.md` - 笔记类文档
❌ `*.summary.md` - 任何带 summary 后缀的文档
❌ `*UPDATES*.md` - 更新记录（应整合到 CHANGELOG.md）
❌ `*OPTIMIZATION*.md` - 优化记录（应整合到组件 README）

### 正确做法

✅ **使用 CHANGELOG.md** 记录变更
✅ **更新现有文档** 添加新章节
✅ **使用 Git commit** 详细记录过程
✅ **使用 Issue/PR** 跟踪改进

## ✅ 允许的临时文档类型

某些临时文档可以创建，但必须有**明确的清理策略**和**生命周期**：

### 1. 设计文档（Design Docs）

- **命名：** `docs/design/YYYY-MM-DD-{主题}.md` 或 `DESIGN_{主题}.draft.md`
- **生命周期：** 决策完成后立即清理
- **清理策略：** 通过 → 整合到正式文档 + 归档；否决 → 归档到 rejected/

### 2. 问题排查记录（Issue Notes）

- **命名：** `ISSUE_{问题描述}_{日期}.draft.md`
- **生命周期：** 最长 7 天
- **清理策略：** 解决后整合到 TROUBLESHOOTING.md，然后删除

### 3. 实验性文档（Experiments）

- **命名：** `experiments/{功能名}_{日期}.draft.md`
- **生命周期：** 最长 30 天
- **清理策略：** 成功 → 整合到正式文档；失败 → ADR 记录；暂停 → 归档

### 4. 会议记录（Meeting Notes）

- **命名：** `meetings/YYYY-MM-DD-{主题}.md`
- **生命周期：** 季度归档
- **清理策略：** 提取决策和行动项，归档到 meetings/archive/YYYY-Q{季度}/

### 5. 临时 Review 记录

- **命名：** `REVIEW_{模块}_{日期}.draft.md`
- **生命周期：** 最长 14 天
- **清理策略：** 创建 Issue 跟踪改进，重要发现整合到文档，然后删除

### 临时文档命名约定

✅ **使用 `.draft.md` 后缀** 明确标识临时文档
✅ **使用专门目录** `docs/design/`, `experiments/`, `meetings/`
❌ **禁止无标识** `COMPLETE_SUMMARY.md`, `FINAL_NOTES.md`

## 📝 文档质量标准

### 每个正式文档必须包含

- ✅ 清晰的标题
- ✅ 📋 概述（1-2 段）
- ✅ 🚀 快速开始（3-5 步）
- ✅ 📖 详细说明
- ✅ 🆘 故障排查
- ✅ 📚 相关文档链接
- ✅ 版本和更新日期

### 文档创建前检查

- [ ] 文档名称符合命名规范
- [ ] 文档位置正确
- [ ] 内容不与现有文档重复
- [ ] 面向用户，不是过程记录
- [ ] 包含必要的章节

## 🔄 清理策略

### Git 集成

**`.gitignore` 应包含：**

```gitignore
*.draft.md
*.wip.md
*.tmp.md
*_TEMP_*.md
experiments/*
!experiments/.gitkeep
meetings/*.md
!meetings/archive/
```

**Pre-commit Hook（可选）：** 检查禁止的文档名称模式

### 定期审查

- **每季度** 审查所有文档
- **发现重复** 立即整合或删除
- **内容过时** 及时更新或归档
- **临时文档超期** 提醒清理

### 归档规则

**何时归档：**

- ✅ 内容已整合到其他文档
- ✅ 仅有历史参考价值
- ✅ 重大重构的过程记录

**归档位置：** `docs/history/YYYY-MM-DD-{主题}/`

## 🎯 实践要点

### 重构/优化时的正确做法

1. **更新 CHANGELOG.md** - 记录所有重要变更
2. **更新现有文档** - 在相关文档中添加新章节（如 nginx/README.md）
3. **使用 Git commit** - 详细记录过程和原因
4. **可选归档** - 如有历史价值，归档到 docs/history/

### 当不确定时

**问自己：**
> "如果我 3 个月后看到这个文档，我会感谢当时创建它吗？"

- **是** → 创建正式文档
- **否** → 使用 Git commit、代码注释或 Issue

### 记住核心原则

1. **创建前三思** - 真的需要这个文档吗？
2. **合并优于创建** - 能更新现有文档吗？
3. **用户优先** - 这对用户有帮助吗？
4. **定期清理** - 及时整合临时文档

---

**遵循这些规则，保持文档库精简和高质量。** 🎯
