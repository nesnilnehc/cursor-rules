---
description: 通用编码原则（跨语言适用）
alwaysApply: true
---

# 通用编码原则

## 核心原则

### 1. 代码组织原则

- **模块化**: 相关功能分组，使用清晰的分隔符
- **单一职责**: 每个函数只做一件事
- **自顶向下**: 高层函数在前，底层实现在后
- **就近原则**: 相关函数放在一起

### 2. 注释原则

- **说明为什么，不是做什么**: 注释应解释设计决策和原因
- **非显而易见才注释**: 不要注释显而易见的代码
- **函数文档化**: 复杂函数必须有参数和返回值说明
- **及时更新**: 代码变更时同步更新注释

```
✅ 好的注释：解释原因和设计决策
❌ 差的注释：重复描述代码逻辑
```

### 3. 命名规范

- **描述性命名**: 名称应清晰表达用途
- **一致性**: 同类事物使用统一命名模式
- **避免缩写**: 除非是广泛认可的缩写
- **上下文相关**: 在作用域内名称应有意义

### 4. 错误处理

- **快速失败**: 遇到错误立即报告，不隐藏
- **清晰提示**: 错误消息应包含上下文和解决方案
- **统一机制**: 使用统一的错误处理函数
- **资源清理**: 确保错误时正确清理资源

### 5. 日志输出

- **分级输出**: 使用标准的日志级别（DEBUG/INFO/WARNING/ERROR）
- **统一格式**: 使用统一的日志函数，不直接输出
- **有意义的消息**: 日志应包含足够的上下文信息
- **可控制性**: 支持通过参数控制日志详细程度

### 6. 代码简洁性

- **避免重复**: DRY（Don't Repeat Yourself）原则
- **避免过度抽象**: 在简洁和可读之间平衡
- **删除死代码**: 不保留注释掉的代码
- **删除过时注释**: 及时清理过时的说明

## 代码审查要点

### 基本检查

- [ ] 无重复的函数或逻辑
- [ ] 无过时的注释和说明
- [ ] 无显而易见的注释
- [ ] 错误消息清晰且提供解决方案
- [ ] 日志输出使用统一的函数
- [ ] 命名清晰且一致
- [ ] 代码组织合理，模块清晰

### 质量标准

- [ ] 函数职责单一
- [ ] 复杂逻辑有注释说明
- [ ] 错误处理完整
- [ ] 资源使用后正确释放
- [ ] 无硬编码的配置（使用变量或配置文件）

## 重构原则

### 何时重构

- 发现重复代码时
- 函数过长（>50 行）时
- 嵌套过深（>3 层）时
- 发现过时注释时

### 如何重构

1. **提取函数**: 将重复逻辑提取为函数
2. **简化条件**: 使用早返回减少嵌套
3. **统一格式**: 使用标准的模块分隔符和注释格式
4. **删除冗余**: 移除过时注释和死代码

### 保持功能不变

- 重构不改变功能
- 每次小步改进
- 及时验证（语法检查、测试）
