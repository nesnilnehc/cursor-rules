---
description: Shell 脚本通用编码标准和最佳实践
globs: *.sh
---

# Shell 脚本编码标准

## 核心要求

1. **严格模式**: 始终使用 `set -euo pipefail`
2. **统一日志**: 使用标准日志函数，禁止直接 `echo "[DEBUG]"` 等
3. **函数注释**: 必须包含参数和返回值说明
4. **模块分隔**: 使用标准分隔符 `# ===`
5. **错误处理**: 实现 `trap` 错误捕获

## 脚本模板

```bash
#!/bin/bash
# =============================================================================
# 脚本名称 - 功能描述
# =============================================================================
set -euo pipefail

# 全局变量（大写）
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# 日志函数（必需）
log_debug() { [[ "$VERBOSE" == "true" ]] && echo -e "${BLUE}[DEBUG] $1${NC}"; }
log_info() { echo -e "${BLUE}[INFO] $1${NC}" >&2; }
log_error() { echo -e "${RED}[ERROR] $1${NC}" >&2; }

# 错误处理（必需）
trap 'log_error "错误: 第 $LINENO 行"; exit 1' ERR

# =============================================================================
# 功能函数
# =============================================================================

main() {
    # 实现
}

main "$@"
```

## 日志规范

### 统一使用日志函数

```bash
# ✅ 正确
log_debug "详细信息"      # 仅 VERBOSE 模式
log_info "流程信息"
log_success "操作成功"
log_warning "非致命警告"
log_error "致命错误"

# ❌ 禁止
echo "[DEBUG] 信息" >&2
echo "[INFO] 信息"
```

**原因**: 统一格式，便于控制和解析。

## 函数注释

### 标准格式

```bash
# 函数功能描述
# 参数: $1 - 说明, $2 - 说明（可选，默认值）
# 返回: 0 成功，1 失败
function_name() {
    local param1="$1"
    local param2="${2:-default}"
    # 实现
}
```

## 命名规范

| 类型 | 格式 | 示例 |
|------|------|------|
| 全局变量 | `UPPER_CASE` | `DOCKER_REGISTRY` |
| 局部变量 | `lower_case` | `image_name` |
| 函数名 | `lower_case` | `read_version` |
| 常量 | `readonly` | `readonly MAX_RETRIES=10` |

## 关键规则

### 变量引用

```bash
# ✅ 始终使用引号
"$VAR"
"${VAR:-default}"

# ❌ 避免
$VAR
```

### 条件测试

```bash
# ✅ 使用 [[ ]]
if [[ -f "$file" ]]; then
if [[ "$str" == "value" ]]; then

# ❌ 避免 [ ]
if [ -f $file ]; then
```

### 模块分隔

```bash
# =============================================================================
# 模块名称
# =============================================================================
```

## 检查清单

- [ ] 使用 `set -euo pipefail`
- [ ] 实现 `trap` 错误处理
- [ ] 使用日志函数（不用 `echo "[INFO]"` 等）
- [ ] 函数有参数和返回值注释
- [ ] 模块用 `# ===` 分隔
- [ ] 全局变量大写，局部变量小写
- [ ] 变量引用用引号
- [ ] 语法检查: `bash -n script.sh`
